#-------------------------------------------------------------------------------
# routine ctmlog.summary.pl
#
# author: terry cannon
#
# disclaimer: this routine is not a product of BMC or its author.  if any client
#             uses it, it at their own risk.  No support is offered at any level
#             within BMC.  Change, troubleshoot, modify as you like.
#
# purpose:  to give administrators a tool to quickly review control-m log information
#           which is available using the ctmlog utility.  Since this can generate
#           huge amounts of data, this routine was created to help identify useful
#           information from the data.
#
# this routine requires an input file which is generated using the ctmlog utility.
# some clients have a nightly ctmlog list job as part of normal maintenance
# so that the flat file can be accessed for reporting (instead of hitting the production db)
#
# sample syntax of the ctmlog utility to gather the input file
#  	ctmlog list "*" > ctmlog.out
#   or  ctmlog list "<fromdate>" "<fromtime>" "<todate>" "<totime>" > ctmlog.out  
# 
#
#
# Syntax to run this routine:
#       ctmlog.summary.pl -l <your ctmlog file> -v [6.1.3,6.2]
#
# Sample invocations of this routine:
#       ctmlog.summary.pl -l ctmlog.txt -v 6.2    -out <your output file>
#       ctmlog.summary.pl -l ctmlog.txt -v 6.1.3
#       ctmlog.summary.pl -l ctmlog.txt -v 6.2 -d
#
# sample report generated by this routine:
#                           ctmlog.summary report        run at 18:38:05
#
#
#0207-0517     NEW DAY PROCEDURE STARTED
#0207-0517     CONTROL-M LOG CLEANUP STARTED
#0207-0517     CONTROL-M LOG CLEANUP ENDED. DAYS=2
#0207-0517     STATISTICS INFORMATION CLEANUP ENDED. MODE=0
#0207-0517     ACTIVE JOBS FILE CLEANUP ENDED
#0208-1914     NEW DAY PROCEDURE STARTED
#0208-1914     CONTROL-M LOG CLEANUP STARTED
#0208-1914     CONTROL-M LOG CLEANUP ENDED. DAYS=30
#0208-1914     STATISTICS INFORMATION CLEANUP ENDED. MODE=0
#0208-1914     ACTIVE JOBS FILE CLEANUP ENDED
#
#
#stats:  Jobs submitted -- 21
#              Ended OK -- 11
#           Ended NotOK -- 10
#          Unique tasks -- 9
#           Cyclic runs -- 12
#     User interactions -- 35
#               created -- 9
#                  held -- 7
#                  free -- 7
#                 Rerun -- 12
#             Forced ok --
#               Deleted --
#             Undeleted --
#
#   note:  multiple reruns of job (cyclic or manual) may affect some of these number
#
#
#    # of         msg
#occurrences      id      sample messages
# ----------      ----    ----------------------------------------------------------------
#
#         2       5006    CONTROL-M LOG CLEANUP ENDED. DAYS=2
#         2       5011    CONTROL-M LOG CLEANUP STARTED
#         4       5030    ACTIVE JOBS FILE DOWNLOAD TO CONTROL-M/EM STARTED
#         2       5040    NEW DAY PROCEDURE STARTED
#         2       5041    ACTIVE JOBS FILE CLEANUP ENDED
#        21       5100    ENDED AT 20050207052313. OSCOMPSTAT 0. RUNCNT 1
#        21       5101    STARTED AT 20050207052252 ON cm2k
#        22       5103    START OF TRACKING ALL ACTIVE JOBS
#        21       5105    SUBMITTED TO cm2k
#        63       5120    JOB STATE CHANGED TO Executing
#        11       5133    ENDED OK
#        10       5134    ENDED NOTOK
#         4       5209    CONDITION 1-OK     0206 ADDED
#        12       5216    REMOVED FROM ACTIVE JOB FILE BY GENERAL DAILY
#         7       5401    HELD BY USER Administrator
#         7       5402    FREED BY USER Administrator
#        12       5404    RERUN BY USER Administrator
#         9       5407    CREATED BY USER Administrator
#--------------------------------------------------------------------------------

use Getopt::Long;                             # getopt and getoptions captures
                                              #   any command line arguments and makes
                                              #   variable assignments for the values
GetOptions( "log=s"      => \$llog,            # -log where the log file is
            "v=s"        => \$ctmver,         # ctmversion 6.1.3 or 6.2
            "out=s"      => \$outfile,        # file that will have final report
            "d"          => \$debug);         # -d turn on debugging
            
    $ctmlog="$llog";
    $onemsg="no";

    if ($llog eq "")
      {
       print   "Sorry, but you must supply an input file (i.e. ctmlog.summary.pl  -log  <your log file> -v 6.2 (or 6.1.3)  -out <your ouput file>\n";
       exit;
      }
      
    if ($ctmver eq "")
      {
       print   "Sorry, but you must supply a version number (i.e. ctmlog.summary.pl  -log  ctmlog.txt -v 6.2 (or 6.1.3)    -out <your ouput file>\n";
       exit;
      }
      
   if ($outfile eq "")
      {
       print   "Sorry, but you must supply an output file (i.e. ctmlog.summary.pl  -log  ctmlog.txt -v 6.2 (or 6.1.3)    -out <your ouput file>\n";
       exit;
      }
            

       
    $done1heading = 0;
    open (ctmlog.out, "$ctmlog") || die "This report requires access to a nightly ctmlog export \nwhich it currently couldn't find at $ctmlog.\n        Please contact your Admin\n";
    close ctmlog.out;

    if ($outfile ne "")
       {
       	 open (ctmrpt,">$outfile") || die "Could not open the output file requested - $outfile";
       }

#    system ("cls");
    gettime();
    print  ctmrpt "ctmlog.summary report        started at $mon\/$mday\/$year $hour:$min:$sec   \n";
 
    print  ctmrpt "\n\n";
    $scanmsgid =0;				# temp counter variable
    $uniquemsgids  =0;				# number of unique msgids encountered
    $seendata=0;

    @mons[1]="Jan";
    @mons[2]="Feb";
    @mons[3]="Mar";
    @mons[4]="Apr";
    @mons[5]="May";
    @mons[6]="Jun";
    @mons[7]="Jul";
    @mons[8]="Aug";
    @mons[9]="Sep";
    @mons[10]="Oct";
    @mons[11]="Nov";
    @mons[12]="Dec";
    
#--------------------------------------------------
#use the log you supplied as input into the code
#--------------------------------------------------

    open (ctmlogin , "< $ctmlog");

#--------------------------------------------------
# main
#--------------------------------------------------

mainloop:    
    while (<ctmlogin>)
     {
#$ttt=$ttt+1;
#if ($ttt > 10000)
# {
#  $ttt=0;
#  $ttd=substr($_,1,4);
#  print " - $ttd\n";
#  
# }
        $l1=length($_);				# get overall length of input line
        if ( $l1 < 2 ) { goto cont1; };    	# skip blank lines
        $i1=index($_,"Date: ");
        if ( $i1 > -1 ) { goto cont1; };   	# skip this line
 	$i1=index($_,"-----------------------");
        if ( $i1 > -1 ) { goto cont1; };   	# skip this line
	$i1=index($_,"Date|Time|");
        if ( $i1 > -1 ) { goto cont1; };   	# skip this line
        $i1=index($_,"to 99999999");
        if ( $i1 > -1 ) { goto cont1; };   	# skip this line
        
 	$i1=index($_,"CTMLOG REPORT");
        if (( $i1 > -1 ) && ( $done1heading == 0 ))   # print   report header line
		{ print  ctmrpt "$_ \n";
		  $done1heading=1;
		  print  ctmrpt "Date-time     Message\n";
 		  print  ctmrpt "---------     ---------------------------------------------------\n";
		 goto cont1; 
		};   
 @userinrec = split(/\|/,"$_");		
# print "debug 0=@userinrec[0]\n";
#3 print "debug 1=@userinrec[1]\n";
# print "debug 2=@userinrec[2]\n";
# print "debug 3=@userinrec[3]\n";
# print "debug 4=@userinrec[4]\n";
# print "debug 5=@userinrec[5]\n";
# print "debug 6=@userinrec[6]\n";
 $date=@userinrec[1];
 $time=@userinrec[2];
##        $date=substr($_,1,4);
        $datemo=substr($date,0,2);
        $dateday=substr($date,2,2);
##      $time=substr($_,6,4);
        $timehr=substr($time,0,2);
        $timemin=substr($time,2,2);
        if ($onemsg eq "no")
           {
             print ctmrpt " *starting with ctmlog beginning  of @mons[$datemo] $dateday at $timehr:$timemin\n\n";
             $onemsg="yes";
           }
##        $id  =substr($_,11,13);
 $id=@userinrec[3];
#v62    $jobid=substr($_,25,5);
#        $jobid=substr($_,76,5);
#v62    $sysid=substr($_,31,2);
#        $sysid=substr($_,82,2);
#v62	$msgid=substr($_,34,4);
#	$msgid=substr($_,85,4);
#v62	$msg  =substr($_,39);
#	$msg  =substr($_,90);

# version 6.1.3 and 6.2 of the ctmlog output had some values on different locations on the input lines so adjust.

#    $jobid=substr($_,25,5);
#    $sysid=substr($_,31,2);
#    $msgid=substr($_,34,4);
#    $msg  =substr($_,39);
    
 $jobid=@userinrec[4];
 $sysid=@userinrec[5];
 $msgid=@userinrec[6];
 $msg=@userinrec[7];    
    if ($ctmver eq "6.1.3")
         {
          $jobid=substr($_,76,5);
          $sysid=substr($_,82,2);
          $msgid=substr($_,85,4);
  $msg  =substr($_,90);

	 }


        $msglen=length("$msg");
        $msg  =substr("$msg",0,$msglen-2);
        $byuser=index("$msg","BY USER");
        $run1=index("$_","RUNCNT 1 ");
        $otherruns=index("$_","RUNCNT");
        
#print "debug input = $_\n";
#print "      -- msgid=$msgid\n";
#print "      -- msg=$msg\n";
#print "      -- jobid=$jobid\n";
#print "      -- id=$id\n";
#print "      -- sysid=$sysid\n";
#sleep 1;

#if ($msgid eq "5040") { print "debug I see 5040 with input of $_\n";}

        if (("$msgid" == "5040") && ($seendata == 1) && ($nonewday == 1))
            { 
            	print  ctmrpt "  --- Partial day information included for mmdd --> $date ---\n\n";
                $nonewday=0;
            	stats();            	

            	goto overnd;
            }
            
#        if (($msgid eq "5040") && (substr($msg,0,7) eq "NEW DAY"))
        if (($msgid eq "5040") && ($seendata ==1) )
            {
            	print "  --- Processing CTMLOG information for @mons[$datemo] $dateday starting at $timehr:$timemin\n\n";
            	stats();
            }   
overnd: 

#---------------------------------------------------------------------------
# check this particular occurrence of msgid to see if it has occurred before
#-----------------------------------------------------------------------------
# if ($debug)
#  {   
#  	print "\n\nm=$msgid  input-> $_\n";
#  }

           $scanmsgid=0;
snewmsgid: while ($scanmsgid < $msgvals )
            {
            $scanmsgid=$scanmsgid+1;
#if ($msgid eq "5006")
# {
#print "debug checking to see if $msgid was previously seen msgid of @msgocc[$scanmsgid]\n";
#}
           if ($msgid eq @msgocc[$scanmsgid])
	      {
                @msgcnt[$scanmsgid]=@msgcnt[$scanmsgid]+1;
# if ($debug)
#  {                
#print ".$msgid cnt[$scanmsgid] = @msgcnt[$scanmsgid] \n";
# }
	        goto gotmsgid;      		# msgid previously occurred  	       
               }
	   }  					# end of snewmsgid 

newmsgid:					# if here then you have identified a new message id
 	$msgvals=$msgvals+1;
 	@msgocc[$msgvals]=$msgid;
 	@msgcnt[$msgvals]=@msgcnt[$msgvals]+1;
 	@msgarray[$msgvals]=$msg;
# if ($debug)
#  {    	
#print "$msgid cnt[$scanmsgid] = @msgcnt[$scanmsgid] \n";
#}	

gotmsgid:


#---------------------------------------------------------------------------
# check this 5103 msg occurrence to see if it has occurred before (its
#  a general message number that can have multiple msg text associated with it.
#  this section counts those individual msg text occurrences
#-----------------------------------------------------------------------------

        if ($msgid eq "5103" )
         {
           $scanmsg5103=0;
smsg5103: while ($scanmsg5103 < $msg5103vals )
            {
            $scanmsg5103=$scanmsg5103+1;

            $s1=substr($msg,0,6);
            $s2=substr(@msg5103array[$scanmsg5103],0,6);
           if ($s1 eq $s2)
	      {
        	@msg5103num[$msg5103vals]=@msg5103num[$msg5103vals]+1;      	
	        goto gotmsg5103;      		# similar msg text previously occurred  	       
               }
	   }  					# end of smsg5103 

newmsg5103:					# if here then you have identified a new message text
 	$msg5103vals=$msg5103vals+1;
 	@msg5103array[$msg5103vals]=$msg;
 	@msg5103num[$msg5103vals]=@msg5103num[$msg5103vals]+1;

gotmsg5103:
         }   					# end of the if msgid=5103 if

#---------------------------------------------------------------------------
# check this 5120 msg occurrence to see if it has occurred before (its
#  a general message number that can have multiple msg text associated with it.
#  this section counts those individual msg text occurrences
#-----------------------------------------------------------------------------

        if ($msgid eq "5120" )
         {
           $scanmsg5120=0;
smsg5120: while ($scanmsg5120 < $msg5120vals )
            {
            $scanmsg5120=$scanmsg5120+1;
            
           if ($msg eq @msg5120array[$scanmsg5120] )
	      {
	      	@msg5120num[$msg5120vals]=@msg5120num[$msg5120vals]+1;
	        goto gotmsg5120;      		# similar msg text previously occurred  	       
               }
	   }  					# end of smsg5120 

newmsg5120:					# if here then you have identified a new message text
 	$msg5120vals=$msg5120vals+1;
 	@msg5120array[$msg5120vals]=$msg;
 	@msg5120num[$msg5120vals]=@msg5120num[$msg5120vals]+1;
gotmsg5120:
         }   					# end of the if msgid=5120 if


        if ($debug) 				# debug is turned on with the "-d" option
          {  
            print   "--debug-- input - $_ \n";
	    print   "     msg  =$msg\n";
            print   "     run1 =$run1\n";
            print   "     date =$date\n";
            print   "     time =$time\n";
            print   "     id   =$id\n";
            print   "     jobid=$jobid\n";
            print   "     sysid=$sysid\n";
            print   "     msgid=$msgid\n";
            print   "     msg  =$msg\n";
            print   "     msglen=$msglen\n";	
          }

        if ($run1 > -1)
         {  
           $originalrun++;
         }
        if ($otherruns > -1)
         {  
           $cyclicruns++;
         }

        if (("$sysid" == "UT") && ( "$msgid" == "5407"))
		{
		 $createdcount++; 
 		}
#if ($msgid eq "5103")
# {
# print   "debug 5103 msg = $msg\n";
#
#}
#	if (("$msgid" == "5103") && (index("$msg","FORCED OK") > -1))
	if ("$msgid" == "5411")
		{
		 $forceokcount++;
		}
	if ("$msgid" == "5409")
		{
		 $killedcount++;
		}		
	if ("$msgid" == "5105")  
		{
		 $submittedcount++; 
 		}
	if ("$msgid" == "5133") 
		{
		 $endedokcount++; 
 		}
	if ("$msgid" == "5134") 
		{
		 $endednotokcount++; 
 		}
	if ("$msgid" == "5401") 
		{
		 $manualholdcount++; 
 		}
	if ("$msgid" == "5402") 
		{
		 $manualfreecount++; 
 		}
	if ("$msgid" == "5403") 
		{
		 $deletecount++; 
 		}
	if ("$msgid" == "5404") 
		{
		 $reruncount++; 
 		}
	if ("$msgid" == "5408") 
		{
		 $undeletecount++; 
 		}


        if (("$msgid" == "5040") || ("$msgid" == "5011") || ("$msgid" == "5006") || 
	     ("$msgid" == "5041"))
   		{
		 print  ctmrpt "$date-$time     $msg\n";
		}
        if (("$msgid" == "5103") && (index("$msg","STATISTICS") > -1))
		{
		 print  ctmrpt "$date-$time     $msg\n";
		}
	if ( $byuser > -1)
  		{
		$userinteractions++;
		}
        $seendata=1;
cont1:
     }   # end mainloop
     
    stats();       
    gettime();
    print ctmrpt  "\n\nctmlog.summary report  ended at $mon\/$mday\/$year $hour:$min:$sec   \n";
    
    close ctmrpt;
    
    print "Your CTMLOG Analysis report can be found in file $outfile and is shown below\n\n\n";
    system "type $outfile | more";
    exit;
 
sub stats
   {
 #  	$debug=1;
     print ctmrpt  "\n\n\n";
     print ctmrpt  "stats:  Jobs submitted -- $submittedcount \n";
     print ctmrpt  "              Ended OK -- $endedokcount  \n";
     print ctmrpt  "           Ended NotOK -- $endednotokcount  \n";
     print ctmrpt  "          Unique tasks -- $originalrun \n";
     $cyclics=$cyclicruns-$originalrun;
     print ctmrpt  "           Cyclic runs -- $cyclics \n";
     print ctmrpt  "     User interactions -- $userinteractions  \n";
     print ctmrpt  "               created -- $createdcount  \n";
     print ctmrpt  "                  held -- $manualholdcount \n";
     print ctmrpt  "                  free -- $manualfreecount \n";
     print ctmrpt  "                 Rerun -- $reruncount  \n";
     print ctmrpt  "             Forced ok -- $forceokcount \n";
     print ctmrpt  "                Killed -- $killedcount \n";
     print ctmrpt  "               Deleted -- $deletecount\n";
     print ctmrpt  "             Undeleted -- $undeletecount\n";
     print ctmrpt  "\n";
#     print ctmrpt  "   note:  multiple reruns of job (cyclic or manual) may affect some of these number\n";
     print ctmrpt  "\n";
     
     bubsort();
     
     print ctmrpt  "\n    # of         msg      \n";
     print ctmrpt  "occurrences      id      example messages (actually 1st occurrence of each msgid text)\n";
     print ctmrpt  " ----------      ----    ----------------------------------------------------------------\n\n";
     
             $tx=0;
        while ($tx < $msgvals)
          { 
          $tx=$tx+1;
          if ((@msgocc[$tx] eq "5103") || (@msgocc[$tx] eq "5120"))
             {
             	printf ctmrpt  ("%10d %10d    \n",@msgcnt[$tx],@msgocc[$tx]);
             }
          else
             {
                printf ctmrpt  ("%10d %10d    %s\n",@msgcnt[$tx],@msgocc[$tx],@msgarray[$tx]);
             }
          if (@msgocc[$tx] eq "5103")
             {
             	$ty=1;
             	while ($ty < $msg5103vals)	# will skip occurrence 0 since it already was print  ed
             	   {
             	   	$ty=$ty+1;
             	   	printf ctmrpt  ("           %10d    %s\n",@msg5103num[$ty],@msg5103array[$ty]);
             	   }	
             } 
          if (@msgocc[$tx] eq "5120")
             {
             	$ty=1;
             	while ($ty < $msg5120vals)	# will skip occurrence 0 since it already was print  ed
             	   {
             	   	$ty=$ty+1;
             	   	printf ctmrpt  ("           %10d    %s\n",@msg5120num[$ty],@msg5120array[$ty]);
             	   }	
             }              
           }
     print ctmrpt  "\n\n\n";
     
# reinitialize variables 
       $submittedcount=0;
       $endedokcount=0;
       $endednotokcount=0;
       $originalrun=0;
       $cyclics=0; 
       $cyclicruns=0;
       $userinteractions=0;
       $createdcount=0;
       $manualholdcount=0;
       $manualfreecount=0;
       $reruncount=0;
       $forceokcount=0;
       $deletecount=0;
       $undeletecount=0; 
       
       $ty=0;
       while ($ty < $msgvals)
         {
           @msgarray[$ty]="";
           @msgocc[$ty]="";
           @msgcnt[$ty]="";
           $ty=$ty+1;
          }
       $msgvals=0;       
           
#print "debug a msg5103vals=$msg5103vals\n";       
       $ty=-1;
       while ($ty < $msg5103vals)
          {
          	$ty=$ty+1;
          	@msg5103array[$ty]="";
          	@msg5103num[$ty]="1";
          }    
       $msg5103vals=0;  
#print "debug b\n";
 
 
       $ty=-1;
       while ($ty < $msg5120vals)
          {
          	$ty=$ty+1;
          	@msg5120array[$ty]="";
          	@msg5120num[$ty]="1";
          }    
       $msg5120vals=0;  
#print "debug b\n";
 }
                            
              
#-------------------------------------------------------------------------------------------------
# get local time and date subroutine
#-------------------------------------------------------------------------------------------------

sub gettime
   {
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    $a=length($sec);
    $b=length($min);
    if (length($sec) < 2) {$sec="0$sec";}
    if (length($min) < 2) {$min="0$min";}
    $year=$year+1900;     
    $mon=$mon+1;
    if ($mon < 10) {$mon="0$mon";}   
    if ($mday < 10) {$mday="0$mday";} 
   }        
      
#-------------------------------------------------------------------------------------------------
# internal bubble sort.  makes sure you see every type of message Control-M produced during the day
#-------------------------------------------------------------------------------------------------
     
sub bubsort    					# bubble sort all msgid occurrence values within the msgocc array 
     {                   			# so that the bottom of the report shows all msgs that occurred
     $x=0;
      while ($x < $msgvals)
       {
          $x=$x+1;
          $y=0;
yloop:         while ($y<$msgvals-$x)
                 {
                 $y=$y+1;
                 $atend=$y+1;
                 if ($atend > $msgvals) {goto eyloop;  } # end of array 
                 if (@msgocc[$y] > @msgocc[$y+1])
                    { 
                       $t1=@msgocc[$y];			# temp hold msgid
                       @msgocc[$y]=@msgocc[$y+1];       # switch the two
                       @msgocc[$y+1]=$t1;                     
                       $t1=@msgcnt[$y];                 # temp hold the msgcount
                       @msgcnt[$y]=@msgcnt[$y+1];       # switch the two
                       @msgcnt[$y+1]=$t1;                       
                       $t1=@msgarray[$y];               # temp hold the msg text
                       @msgarray[$y]=@msgarray[$y+1];   # switch the two.
                       @msgarray[$y+1]=$t1;
                    }
eyloop:          }				# end of yloop
        }					# end while    
      } 					# end bubsort function  